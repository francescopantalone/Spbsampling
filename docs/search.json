[{"path":"https://francescopantalone.github.io/Spbsampling/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Francesco Pantalone. Author, maintainer. Roberto Benedetti. Author. Federica Piersimoni. Author.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pantalone F, Benedetti R, Pierismoni F (2022). “Spbsampling: R Package Spatially Balanced Sampling.” Journal Statistical Software, Code Snippets, 103(2), 1–22. doi:10.18637/jss.v103.c02.","code":"@Article{,   title = {{Spbsampling}: An {R} Package for Spatially Balanced Sampling},   author = {Francesco Pantalone and Roberto Benedetti and Federica Pierismoni},   journal = {Journal of Statistical Software, Code Snippets},   year = {2022},   volume = {103},   number = {2},   pages = {1--22},   doi = {10.18637/jss.v103.c02}, }"},{"path":"https://francescopantalone.github.io/Spbsampling/index.html","id":"spbsampling-","dir":"","previous_headings":"","what":"Spatially Balanced Sampling","title":"Spatially Balanced Sampling","text":"R package spatially balanced sampling. Spbsampling package provides functions draw spatially balanced samples. particular, implemented sampling designs allow select probability samples well spread population interest, dimension using distance function (e.g. Euclidean distance, Manhattan distance). details regarding implemented sampling designs, may want look references section. implementation done C++ use Rcpp RcppArmadillo.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatially Balanced Sampling","text":"can install released version Spbsampling CRAN development version GitHub, using devtools package using remotes package, lighter package devtools","code":"install.packages(\"Spbsampling\") devtools::install_github(\"francescopantalone/Spbsampling\") remotes::install_github(\"francescopantalone/Spbsampling\")"},{"path":"https://francescopantalone.github.io/Spbsampling/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Spatially Balanced Sampling","text":"Pantalone F, Benedetti R, Piersimoni F (2022). R Package Spatially Balanced Sampling. Journal Statistical Software, Code Snippets, 103(2), 1-22. https://doi.org/10.18637/jss.v103.c02 Benedetti R, Piersimoni F (2017). spatially balanced design probability function proportional within sample distance. Biometrical Journal, 59(5), 1067-1084. https://doi.org/10.1002/bimj.201600194 Benedetti R, Piersimoni F (2017). Fast Selection Spatially Balanced Samples. arXiv. https://arxiv.org/abs/1710.09116","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/Spbsampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatially balanced sampling designs — Spbsampling","title":"Spatially balanced sampling designs — Spbsampling","text":"Selection spatially balanced samples. particular, implemented sampling designs allow select probability samples well spread population interest, dimension using distance function (e.g. Euclidean distance, Manhattan distance). implementation done C++ use Rcpp RcppArmadillo.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/Spbsampling.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spatially balanced sampling designs — Spbsampling","text":"Pantalone F, Benedetti R, Piersimoni F (2022). R Package Spatially Balanced Sampling. Journal Statistical Software, Code Snippets, 103(2), 1-22. <doi:10.18637/jss.v103.c02> Benedetti R, Piersimoni F (2017). spatially balanced design probability function proportional within sample distance. Biometrical Journal, 59(5), 1067-1084. doi:10.1002/bimj.201600194 Benedetti R, Piersimoni F (2017). Fast Selection Spatially Balanced Samples. arXiv. https://arxiv.org/abs/1710.09116","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/Spbsampling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spatially balanced sampling designs — Spbsampling","text":"Francesco Pantalone, Roberto Benedetti, Federica Piersimoni Maintainer: Francesco Pantalone pantalone.fra@gmail.com","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/hpwd.html","id":null,"dir":"Reference","previous_headings":"","what":"Heuristic Product Within Distance (Spatially Balanced Sampling Design) — hpwd","title":"Heuristic Product Within Distance (Spatially Balanced Sampling Design) — hpwd","text":"Selects spatially balanced samples use Heuristic Product Within Distance design (HPWD). constant inclusion probabilities \\(\\pi_{}=n/N\\), \\(n\\) sample size \\(N\\) population size, distance matrix standardized function stprod.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/hpwd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heuristic Product Within Distance (Spatially Balanced Sampling Design) — hpwd","text":"","code":"hpwd(dis, n, beta = 10, nrepl = 1L)"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/hpwd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heuristic Product Within Distance (Spatially Balanced Sampling Design) — hpwd","text":"dis distance matrix NxN specifies far pairs units population . n Sample size. beta Parameter \\(\\beta\\) algorithm. higher \\(\\beta\\) , sample going spread (default = 10). nrepl Number samples draw (default = 1).","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/hpwd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heuristic Product Within Distance (Spatially Balanced Sampling Design) — hpwd","text":"Returns matrix nrepl x n, contains nrepl selected samples, stored row. particular, -th row contains labels units selected -th sample.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/hpwd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Heuristic Product Within Distance (Spatially Balanced Sampling Design) — hpwd","text":"HPWD design generates samples approximately probabilities pwd significantly smaller number steps. fact, algorithm randomly selects sample size \\(n\\) exactly \\(n\\) steps, updating step selection probability -selected units, depending distance units already selected previous steps.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/hpwd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Heuristic Product Within Distance (Spatially Balanced Sampling Design) — hpwd","text":"Benedetti R, Piersimoni F (2017). spatially balanced design probability function proportional within sample distance. Biometrical Journal, 59(5), 1067-1084. doi:10.1002/bimj.201600194 Benedetti R, Piersimoni F (2017). Fast Selection Spatially Balanced Samples. arXiv. https://arxiv.org/abs/1710.09116","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/hpwd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heuristic Product Within Distance (Spatially Balanced Sampling Design) — hpwd","text":"","code":"# Example 1 # Draw 1 sample of dimension 10 without constant inclusion probabilities dis <- as.matrix(dist(cbind(lucas_abruzzo$x, lucas_abruzzo$y))) # distance matrix s <- hpwd(dis = dis, n = 10) # drawn sample # \\donttest{ # Example 2 # Draw 1 sample of dimension 15 with constant inclusion probabilities # equal to n/N, with N = population size dis <- as.matrix(dist(cbind(lucas_abruzzo$x, lucas_abruzzo$y))) # distance matrix con <- rep(1, nrow(dis)) # vector of constraints stand_dist <- stprod(mat = dis, con = con) # standardized matrix s <- hpwd(dis = stand_dist$mat, n = 15) # drawn sample  # Example 3 # Draw 2 samples of dimension 15 with constant inclusion probabilities # equal to n/N, with N = population size, and an increased level of spread, beta = 20 dis <- as.matrix(dist(cbind(lucas_abruzzo$x, lucas_abruzzo$y))) # distance matrix con <- rep(0, nrow(dis)) # vector of constraints stand_dist <- stprod(mat = dis, con = con) # standardized matrix s <- hpwd(dis = stand_dist$mat, n = 15, beta = 20, nrepl = 2) # drawn samples # }"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/income_emilia.html","id":null,"dir":"Reference","previous_headings":"","what":"The income of municipalities of ","title":"The income of municipalities of ","text":"dataset contains total income municipalities region \"Emilia Romagna\", Italy, year 2015. municipality defined ISTAT (Istituto nazionale di statistica, Italy) code name. municipality following auxiliary variables: province, number taxpayers spatial coordinates (geographical position).","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/income_emilia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The income of municipalities of ","text":"","code":"income_emilia"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/income_emilia.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The income of municipalities of ","text":"data frame 334 rows 7 variables: municipality_code identification municipality code municipality name municipality province province municipality numtaxpay number taxpayers municipality tot_inc average income municipality x_coord coordinate x municipality y_coord coordinate y municipality","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/income_emilia.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The income of municipalities of ","text":"dataset rearrangement data released Italian Finance Department, MEF - Dipartimento delle Finanze (Italy).","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/lucas_abruzzo.html","id":null,"dir":"Reference","previous_headings":"","what":"LUCAS data for the region ","title":"LUCAS data for the region ","text":"land use/cover area frame statistical survey, abbreviated LUCAS, European field survey program funded executed Eurostat. objective set area frame surveys provision coherent harmonised statistics land use land cover European Union (EU). Note LUCAS survey concept land extended inland water areas (lakes, river, coastal areas, etc.) embrace uses earth's surface (mine deposits, subways, etc.). LUCAS survey point survey, particular basic unit observation circle radius 1.5m (corresponding identifiable point orthophoto). classification clear distinction land cover land use: land cover means physical cover (\"material\") observed earth's surface; land use means socio-economic function observed earth's surface. assign code identified type point . Land cover 8 main categories, indicated letter: artificial land B cropland C woodland D shrubland E grassland F bareland G water H wetlands Every main category subclasses, indicated combination letter category digits. Altogether 84 classes. Land use 14 main categories. altogether 33 classes, indicated combination letter U three digits.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/lucas_abruzzo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LUCAS data for the region ","text":"","code":"lucas_abruzzo"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/lucas_abruzzo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"LUCAS data for the region ","text":"data frame 2699 rows 7 variables: id identified code unit spatial point prov province elev elevation unit spatial point, meant height sea level x coordinate x y coordinate y lc land cover code lu land use code","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/lucas_abruzzo.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"LUCAS data for the region ","text":"dataset rearrangement data LUCAS 2012 region \"Abruzzo\", Italy. https://ec.europa.eu/eurostat/web/lucas/data/primary-data/2012","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/pwd.html","id":null,"dir":"Reference","previous_headings":"","what":"Product Within Distance (Spatially Balanced Sampling Design) — pwd","title":"Product Within Distance (Spatially Balanced Sampling Design) — pwd","text":"Selects spatially balanced samples use Product Within Distance design (PWD). constant inclusion probabilities \\(\\pi_{}=n/N\\), \\(n\\) sample size \\(N\\) population size, distance matrix standardized function stprod.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/pwd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Product Within Distance (Spatially Balanced Sampling Design) — pwd","text":"","code":"pwd(dis, n, beta = 10, nrepl = 1L, niter = 10L)"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/pwd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Product Within Distance (Spatially Balanced Sampling Design) — pwd","text":"dis distance matrix NxN specifies far pairs units population . n Sample size. beta Parameter \\(\\beta\\) algorithm. higher \\(\\beta\\) , sample going spread (default = 10). nrepl Number samples draw (default = 1). niter Maximum number iterations algorithm. iterations better require time. Usually 10 efficient (default = 10).","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/pwd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Product Within Distance (Spatially Balanced Sampling Design) — pwd","text":"Returns list following components: s, matrix nrepl x n, contains nrepl selected samples, stored row. particular, -th row contains labels units selected -th sample. iterations, number iterations run algorithm.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/pwd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Product Within Distance (Spatially Balanced Sampling Design) — pwd","text":"Benedetti R, Piersimoni F (2017). spatially balanced design probability function proportional within sample distance. Biometrical Journal, 59(5), 1067-1084. doi:10.1002/bimj.201600194","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/pwd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Product Within Distance (Spatially Balanced Sampling Design) — pwd","text":"","code":"# Example 1 # Draw 1 sample of dimension 15 without constant inclusion probabilities dis <- as.matrix(dist(cbind(lucas_abruzzo$x, lucas_abruzzo$y))) # distance matrix s <- pwd(dis = dis, n = 15)$s  # drawn sample # \\donttest{ # Example 2 # Draw 1 sample of dimension 15 with constant inclusion probabilities # equal to n/N, with N = population size dis <- as.matrix(dist(cbind(lucas_abruzzo$x, lucas_abruzzo$y))) # distance matrix con <- rep(0, nrow(dis)) # vector of constraints stand_dist <- stprod(mat = dis, con = con) # standardized matrix s <- pwd(dis = stand_dist$mat, n = 15)$s  # drawn sample  # Example 3 # Draw 2 samples of dimension 15 with constant inclusion probabilities # equal to n/N, with N = population size, and an increased level of spread, beta = 20 dis <- as.matrix(dist(cbind(lucas_abruzzo$x, lucas_abruzzo$y))) # distance matrix con <- rep(0, nrow(dis)) # vector of constraints stand_dist <- stprod(mat = dis, con = con) # standardized matrix s <- pwd(dis = stand_dist$mat, n = 15, beta = 20, nrepl = 2)$s  # drawn samples # }"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/sbi.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial Balance Index — sbi","title":"Spatial Balance Index — sbi","text":"Computes Spatial Balance Index (SBI), measure spatial balance sample. lower , better spread.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/sbi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial Balance Index — sbi","text":"","code":"sbi(dis, pi, s)"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/sbi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial Balance Index — sbi","text":"dis distance matrix NxN specifies far pairs units population . pi vector first order inclusion probabilities units population. s vector labels sample.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/sbi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial Balance Index — sbi","text":"Returns Spatial Balance Index.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/sbi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spatial Balance Index — sbi","text":"SBI based Voronoi polygons. Given sample s, unit \\(\\) sample Voronoi polygon, composed population units closer \\(\\) sample unit \\(j\\). , per Voronoi polygon, define \\(v_{}\\) sum inclusion probabilities units \\(\\)-th Voronoi polygon. Finally, variance \\(v_{}\\) SBI.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/sbi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spatial Balance Index — sbi","text":"Stevens DL, Olsen AR (2004). Spatially Balanced Sampling Natural Resources. Journal American Statistical Association, 99(465), 262-278. doi:10.1198/016214504000000250","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/sbi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial Balance Index — sbi","text":"","code":"# \\dontshow{ d <- matrix(runif(200), 100, 2) dis <- as.matrix(dist(d)) pi <- rep(10 / 100, 100) s <- sample(1:100,10) sbi(dis = dis, pi = pi, s = s) # } # \\donttest{ dis <- as.matrix(dist(cbind(simul1$x, simul1$y))) # distance matrix con <- rep(0, nrow(dis)) # vector of constraints stand_dist <- stprod(mat = dis, con = con) # standardized matrix pi <- rep(100 / nrow(dis), nrow(dis)) # vector of probabilities inclusion s <- pwd(dis = stand_dist$mat, n = 100)$s # sample sbi(dis = dis, pi = pi, s = s) # }"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/simul1.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Population 1. — simul1","title":"Simulated Population 1. — simul1","text":"dataset contains simulated georeferenced population dimension \\(N=1000\\). coordinates generated range \\([0,1]\\) simulated realization particular random point pattern: Neyman-Scott process Cauchy cluster kernel. nine values unit generated according outcome Gaussian stochastic process, intensity dependence parameter \\(\\rho=0.001\\) (means low dependence) spatial trend.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/simul1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Population 1. — simul1","text":"","code":"simul1"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/simul1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Population 1. — simul1","text":"data frame  1000 rows 11 variables: x coordinate x y coordinate y z11 first value unit z12 second value unit z13 third value unit z14 fourth value unit z15 fifth value unit z16 sixth value unit z17 seventh value unit z18 eighth value unit z19 ninth value unit","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/simul1.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated Population 1. — simul1","text":"Benedetti R, Piersimoni F (2017). spatially balanced design probability function proportional within sample distance. Biometrical Journal, 59(5), 1067-1084.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/simul2.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Population 2. — simul2","title":"Simulated Population 2. — simul2","text":"dataset contains simulated georeferenced population dimension \\(N=1000\\). coordinates generated range \\([0,1]\\) simulated realization particular random point pattern: Neyman-Scott process Cauchy cluster kernel. nine values unit generated according outcome Gaussian stochastic process, intensity dependence parameter \\(\\rho=0.01\\) (means medium dependence) spatial trend \\(x_{1}+x_{2}+\\epsilon\\).","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/simul2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Population 2. — simul2","text":"","code":"simul2"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/simul2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Population 2. — simul2","text":"data frame  1000 rows 11 variables: x coordinate x y coordinate y z21 first value unit z22 second value unit z23 third value unit z24 fourth value unit z25 fifth value unit z26 sixth value unit z27 seventh value unit z28 eighth value unit z29 ninth value unit","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/simul2.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated Population 2. — simul2","text":"Benedetti R, Piersimoni F (2017). spatially balanced design probability function proportional within sample distance. Biometrical Journal, 59(5), 1067-1084.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/simul3.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Population 3. — simul3","title":"Simulated Population 3. — simul3","text":"dataset contains simulated georeferenced population dimension \\(N=1000\\). coordinates generated range \\([0,1]\\) simulated realization particular random point pattern: Neyman-Scott process Cauchy cluster kernel. nine values unit generated according outcome Gaussian stochastic process, intensity dependence parameter \\(\\rho=0.1\\) (means high dependence) spatial trend \\(x_{1}+x_{2}+\\epsilon\\).","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/simul3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Population 3. — simul3","text":"","code":"simul3"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/simul3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Population 3. — simul3","text":"data frame  1000 rows 11 variables: x coordinate x y coordinate y z31 first value unit z32 second value unit z33 third value unit z34 fourth value unit z35 fifth value unit z36 sixth value unit z37 seventh value unit z38 eighth value unit z39 ninth value unit","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/simul3.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated Population 3. — simul3","text":"Benedetti R, Piersimoni F (2017). spatially balanced design probability function proportional within sample distance. Biometrical Journal, 59(5), 1067-1084.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/stprod.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize a symmetric matrix (distances) to fixed row (column) products — stprod","title":"Standardize a symmetric matrix (distances) to fixed row (column) products — stprod","text":"Standardizes distance matrix fixed rows columns products. function iteratively constrains logarithmic transformed matrix know products, order keep symmetry matrix, iteration performs average transpose. known products equal constant (e.g. 0), method provides simple accurate way scale distance matrix doubly stochastic matrix.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/stprod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize a symmetric matrix (distances) to fixed row (column) products — stprod","text":"","code":"stprod(mat, con, differ = 1e-15, niter = 1000L)"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/stprod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize a symmetric matrix (distances) to fixed row (column) products — stprod","text":"mat distance matrix size NxN. con vector row (column) constraints. differ scalar maximum accepted difference constraint (default = 1e-15). niter integer maximum number iterations (default = 1000).","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/stprod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize a symmetric matrix (distances) to fixed row (column) products — stprod","text":"Returns list following components: mat, standardized distance matrix size NxN. iterations, number iterations run algorithm. conv, convergence reached algorithm.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/stprod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardize a symmetric matrix (distances) to fixed row (column) products — stprod","text":"standardized matrix affected problems arising units different inclusion probabilities caused undesired features spatial distribution population, edge effects /isolated points.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/stprod.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardize a symmetric matrix (distances) to fixed row (column) products — stprod","text":"Benedetti R, Piersimoni F (2017). spatially balanced design probability function proportional within sample distance. Biometrical Journal, 59(5), 1067-1084. doi:10.1002/bimj.201600194","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/stprod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize a symmetric matrix (distances) to fixed row (column) products — stprod","text":"","code":"# \\dontshow{ d <- matrix(runif(200), 100, 2) dis <- as.matrix(dist(d)) con <- rep(0, nrow(dis)) stand_dist <- stprod(mat = dis, con = con) # } # \\donttest{ dis <- as.matrix(dist(cbind(simul1$x, simul1$y))) # distance matrix con <- rep(0, nrow(dis)) # vector of constraints stand_dist <- stprod(mat = dis, con = con) # standardized matrix # }"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/stsum.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize a symmetric matrix (distances) to fixed row (column) totals — stsum","title":"Standardize a symmetric matrix (distances) to fixed row (column) totals — stsum","text":"Standardizes distance matrix fixed rows columns totals. function iteratively constrains rows sums matrix know totals, order keep symmetry matrix, iteration performs average transpose. known totals equal constant (e.g. 1), method provides simple accurate way scale distance matrix doubly stochastic matrix.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/stsum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize a symmetric matrix (distances) to fixed row (column) totals — stsum","text":"","code":"stsum(mat, con, differ = 1e-15, niter = 1000L)"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/stsum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize a symmetric matrix (distances) to fixed row (column) totals — stsum","text":"mat distance matrix size NxN. con vector row (column) constraints. differ scalar maximum accepted difference constraint (default = 1e-15). niter integer maximum number iterations (default = 1000).","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/stsum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize a symmetric matrix (distances) to fixed row (column) totals — stsum","text":"Returns list following components: mat, standardized distance matrix size NxN. iterations, number iterations run algorithm. conv, convergence reached algorithm.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/stsum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardize a symmetric matrix (distances) to fixed row (column) totals — stsum","text":"standardized matrix affected problems arising units different inclusion probabilities caused undesired features spatial distribution population, edge effects /isolated points.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/stsum.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardize a symmetric matrix (distances) to fixed row (column) totals — stsum","text":"Benedetti R, Piersimoni F (2017). spatially balanced design probability function proportional within sample distance. Biometrical Journal, 59(5), 1067-1084. doi:10.1002/bimj.201600194","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/stsum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize a symmetric matrix (distances) to fixed row (column) totals — stsum","text":"","code":"dis <- as.matrix(dist(cbind(simul2$x, simul2$y))) # distance matrix con <- rep(1, nrow(dis)) # vector of constraints stand_dist <- stsum(mat = dis, con = con) # standardized matrix"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/swd.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum Within Distance (Spatially Balanced Sampling Design) — swd","title":"Sum Within Distance (Spatially Balanced Sampling Design) — swd","text":"Selects spatially balanced samples use Sum Within Distance design (SWD). constant inclusion probabilities \\(\\pi_{}=n/N\\), \\(n\\) sample size \\(N\\) population size, distance matrix standardized function stsum.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/swd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum Within Distance (Spatially Balanced Sampling Design) — swd","text":"","code":"swd(dis, n, beta = 10, nrepl = 1L, niter = 10L)"},{"path":"https://francescopantalone.github.io/Spbsampling/reference/swd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum Within Distance (Spatially Balanced Sampling Design) — swd","text":"dis distance matrix NxN specifies far pairs units population . n Sample size. beta Parameter \\(\\beta\\) algorithm. higher \\(\\beta\\) , sample going spread. nrepl Number samples draw (default = 1). niter Maximum number iterations algorithm. iterations better require time. Usually 10 efficient (default = 10).","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/swd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum Within Distance (Spatially Balanced Sampling Design) — swd","text":"Returns list following components: s, matrix nrepl x n, contains nrepl selected samples, stored row. particular, -th row contains labels units selected -th sample. iterations, number iterations run algorithm.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/swd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sum Within Distance (Spatially Balanced Sampling Design) — swd","text":"Benedetti R, Piersimoni F (2017). spatially balanced design probability function proportional within sample distance. Biometrical Journal, 59(5), 1067-1084. doi:10.1002/bimj.201600194","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/reference/swd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum Within Distance (Spatially Balanced Sampling Design) — swd","text":"","code":"# Example 1 # Draw 1 sample of dimension 15 without constant inclusion probabilities dis <- as.matrix(dist(cbind(income_emilia$x_coord, income_emilia$y_coord))) # distance matrix s <- swd(dis = dis, n = 15)$s  # drawn sample # \\donttest{ # Example 2 # Draw 1 sample of dimension 15 with constant inclusion probabilities # equal to n/N, with N = population size dis <- as.matrix(dist(cbind(income_emilia$x_coord,income_emilia$y_coord))) # distance matrix con <- rep(1, nrow(dis)) # vector of constraints stand_dist <- stsum(mat = dis, con = con) # standardized matrix s <- swd(dis = stand_dist$mat, n = 15)$s  # drawn sample  # Example 3 # Draw 2 samples of dimension 15 with constant inclusion probabilities # equal to n/N, with N = population size and an increased level of spread, i.e. beta = 20 dis <- as.matrix(dist(cbind(income_emilia$x_coord,income_emilia$y_coord))) # distance matrix con <- rep(1, nrow(dis)) # vector of constraints stand_dist <- stsum(mat = dis, con = con) # standardized matrix s <- swd(dis = stand_dist$mat, n = 15, beta = 20, nrepl = 2)$s  # drawn samples # }"},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"spbsampling-135","dir":"Changelog","previous_headings":"","what":"Spbsampling 1.3.5","title":"Spbsampling 1.3.5","text":"CRAN release: 2022-08-24 Added JSS reference.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"spbsampling-134","dir":"Changelog","previous_headings":"","what":"Spbsampling 1.3.4","title":"Spbsampling 1.3.4","text":"CRAN release: 2020-08-24 Functions pwd() swd() now return list following components: s, samples stored matrix nrepl * n, iterations, number iterations run algorithm. Functions stprod() stsum() now return list following components: mat, standardized matrix, iterations, number iterations run algorithm, conv, convergence reached algorithm.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"spbsampling-133","dir":"Changelog","previous_headings":"","what":"Spbsampling 1.3.3","title":"Spbsampling 1.3.3","text":"CRAN release: 2020-03-31 Fixed typos examples.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"spbsampling-132","dir":"Changelog","previous_headings":"","what":"Spbsampling 1.3.2","title":"Spbsampling 1.3.2","text":"CRAN release: 2020-03-04","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"usage-1-3-2","dir":"Changelog","previous_headings":"","what":"Usage","title":"Spbsampling 1.3.2","text":"functions pwd(), swd() hpwd() changed name parameter nsamp n.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"under-the-hood-1-3-2","dir":"Changelog","previous_headings":"","what":"Under the hood","title":"Spbsampling 1.3.2","text":"functions pwd() swd() introduced stopping criterion.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"spbsampling-131","dir":"Changelog","previous_headings":"","what":"Spbsampling 1.3.1","title":"Spbsampling 1.3.1","text":"CRAN release: 2019-12-16","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"usage-1-3-1","dir":"Changelog","previous_headings":"","what":"Usage","title":"Spbsampling 1.3.1","text":"functions pwd(), swd() hpwd() changed name parameter bexp beta. functions stprod() stsum() changed name parameter vecin con.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"under-the-hood-1-3-1","dir":"Changelog","previous_headings":"","what":"Under the hood","title":"Spbsampling 1.3.1","text":"functions pwd() swd() replaced arma::sort_index() arma::stable_sort_index(). functions pwd(), swd() hpwd() fixed sample size check.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"spbsampling-130","dir":"Changelog","previous_headings":"","what":"Spbsampling 1.3.0","title":"Spbsampling 1.3.0","text":"CRAN release: 2019-08-04","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"new-features-1-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Spbsampling 1.3.0","text":"functions pwd() hpwd() new parameter called bexp introduced, regulates amount spread samples. Default value set 10. function swd() parameter bexp now set double default equal 10.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"minor-improvements-1-3-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"Spbsampling 1.3.0","text":"updates examples; removed non-ASCII characters; inserted links reference websites.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"spbsampling-120","dir":"Changelog","previous_headings":"","what":"Spbsampling 1.2.0","title":"Spbsampling 1.2.0","text":"CRAN release: 2019-03-12 Changed output functions pwd(), swd() hpwd() matrix dimension (nsamp * nrepl) * 2 matrix dimension nrepl * nsamp. Removed Rdpack Imports. Minor improvements guides. Changed name file heurprod.cpp hpwd.cpp","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"spbsampling-110","dir":"Changelog","previous_headings":"","what":"Spbsampling 1.1.0","title":"Spbsampling 1.1.0","text":"CRAN release: 2019-01-21","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Spbsampling 1.1.0","text":"Added new function sbi() compute spatial index sample, implemented C++ Armadillo library, using Rcpp RcppArmadillo. functions pwd() swd() parameter nrepl now set default 1. functions pwd() swd() parameter niter now set default 10. functions stprod() stsum() parameter differ now set default 1e-15. functions stprod() stsum() parameter niter now set default 1000. functions stprod() stsum() print convergence step anymore.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"improvements-under-the-hood-1-1-0","dir":"Changelog","previous_headings":"","what":"Improvements under the hood","title":"Spbsampling 1.1.0","text":"functions pwd() swd() now take advantages Armadillo library. function stprod() now implemented C++ Armadillo library, using Rcpp RcppArmadillo. function stsum() now implemented C++ Armadillo library, using Rcpp RcppArmadillo. function hpwd() now implemented C++ Armadillo library, using Rcpp RcppArmadillo. functions now checks correct inputs.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"minor-improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"Spbsampling 1.1.0","text":"Correction typos along guides.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"miscellaneous-1-1-0","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"Spbsampling 1.1.0","text":"Added NEWS.md file track changes package. Updated DESCRIPTION file.","code":""},{"path":"https://francescopantalone.github.io/Spbsampling/news/index.html","id":"spbsampling-100","dir":"Changelog","previous_headings":"","what":"Spbsampling 1.0.0","title":"Spbsampling 1.0.0","text":"CRAN release: 2018-05-30 First release CRAN.","code":""}]
